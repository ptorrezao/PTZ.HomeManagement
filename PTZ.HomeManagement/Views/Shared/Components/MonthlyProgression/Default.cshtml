@model LineChartViewModel
@inject IViewLocalizer localizer

@{
    var name = Guid.NewGuid().ToString().Replace("-", "");
    var legend = (bool?)ViewData["Legend"] ?? true;
    var ystacked = (bool?)ViewData["YStacked"] ?? false;
    var size = (string)ViewData["Size"];
    size = string.IsNullOrEmpty(size) ? "col-lg-4" : size;

    var title = (string)ViewData["title"] ?? "Total_Assets";
    var subtitle = (string)ViewData["subtitle"] ?? "Total_Assets_SubTitle";

    var minDate = Model.Movements.Min(x => x.XAxis);
    var maxDate = Model.Movements.Max(x => x.XAxis);
}

<div class="col-xl-5 col-md-12">
    <div class="card ">
        <div class="card-header ">
            <h4 class="card-title">As Minhas Finanças</h4>
            <p class="card-category">Resumo de Contas [@minDate - @maxDate]</p>
        </div>
        <div class="card-body ">
            <canvas id="@name"></canvas>
        </div>
    </div>
</div>
@Html.Script(
            @<script type="text/javascript">
         $(document).ready(function () {
             new Chart($("#@name"), config_@name);
         });

        var config_@name = {
             type: 'line',
             data: {
                 labels:   @Html.Raw(Json.Serialize(Model.Movements.GroupBy(x => x.XAxis).Select(z => z.Max(x => x.XAxis)))),
                 datasets: [@foreach (var a in Model.Movements.GroupBy(w => w.Group).OrderBy(x=>x.Sum(q=>q.Amount)))
                 {
                     <text>
                     {
                         label: '@Html.Raw(a.Max(x=>x.Group).ToString())',
                         data:  @Html.Raw(Json.Serialize(a.GroupBy(x => x.XAxis).Select(z => z.Sum(x => x.Amount)))),
                         backgroundColor: @Html.Raw(Json.Serialize(a.Max(z=>z.Color))),
                         lineTension: 0.1,
                         xpto: @Html.Raw(Json.Serialize(a.GroupBy(x => x.XAxis)))
                     },
                     </text>
                 }]
             }, options: {
                 legend: {
                     display:false,
                 },
                 scales: {
                     xAxes: [{
                         stacked: true
                     }],
                     yAxes: [{
                         stacked: @ystacked.ToString().ToLower()
                     }]
                 },
                 tooltips: {
                     mode: 'index',
                     intersect: false
                 },
                 plugins: {
                     filler: {
                         propagate: true
                     }
                 }
             }
         };


            </script>)

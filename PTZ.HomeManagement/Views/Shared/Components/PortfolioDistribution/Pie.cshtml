@model DoughnutChartViewModel
@{
    var name = Guid.NewGuid().ToString().Replace("-", "");
}

<div class="col-xl-3 col-lg-6 col-md-6 col-sm-12 ">
    <div class="card ">
        <div class="card-header ">
            <h4 class="card-title">Total</h4>
            <p class="card-category">Agregado</p>
        </div>
        <div class="card-body ">
            <canvas id="@name"></canvas>
        </div>
        <div class="card-footer ">
            <hr>
            <div class="stats">
                @foreach (var item in Model.Assets.GroupBy(x => x.Group))
                {
                    <text>
                        <span class="badge " style="background-color: @item.Max(x=>x.Color)">@item.Key: @item.Sum(x => x.Amount).ConvertToCurrency("€")</span>
                    </text>
                }
                <span class="badge badge-light">Total: @Model.Assets.Sum(x => x.Amount).ConvertToCurrency("€")</span>
            </div>
        </div>
    </div>
</div>
@Html.Script(
    @<script type="text/javascript">
        $(document).ready(function () {
            var ctx = $("#@name");
            new Chart(ctx, config_@name);
        });

        var datasets_@name = [
            {
                data:  @Html.Raw(Json.Serialize(Model.Assets.Select(x => x.Amount))),
                backgroundColor: @Html.Raw(Json.Serialize(Model.Assets.Select(x => x.Color))),
                labels: @Html.Raw(Json.Serialize(Model.Assets.Select(x => x.AccountTitle)))
            },
            {
                data: [].concat.apply([], @Html.Raw(Json.Serialize(Model.Assets.GroupBy(x => x.AssetType).Select(s => s.Sum(x => x.Amount))))),
                backgroundColor: [].concat.apply([], @Html.Raw(Json.Serialize(Model.Assets.GroupBy(x => x.AssetType).Select(s => s.Max (x => x.Color))))),
                labels: [].concat.apply([], @Html.Raw(Json.Serialize(Model.Assets.GroupBy(x => x.AssetType).Select(s => s.Max(x => x.AssetType.ToString()))))),
            },
            {
                data: @Html.Raw(Json.Serialize(Model.Assets.GroupBy(x=>x.Group).Select(z=> z.Sum(x=>x.Amount)))),
                backgroundColor: @Html.Raw(Json.Serialize(Model.Assets.GroupBy(x => x.Group).Select(z => z.Max(x => x.Color)))),
                labels: @Html.Raw(Json.Serialize(Model.Assets.GroupBy(x=>x.Group).Select(z=> z.Max(x=>x.Group)))),
            }];

        var config_@name = {
            type: 'pie',
            data: {
                datasets: datasets_@name,
                labels: @Html.Raw(Json.Serialize(Model.Assets.Select(x => x.AccountTitle)))
            },
            options: {
                responsive: true,
                legend: {
                   display: false,
                },
                tooltips: {
                    callbacks: {
                        label: function (tooltipItems, data) {
                            return data.datasets[tooltipItems.datasetIndex].labels[tooltipItems.index] + ":" + data.datasets[tooltipItems.datasetIndex].data[tooltipItems.index] + "€";
                        }
                    }
                }
            }
        };
    </script>)
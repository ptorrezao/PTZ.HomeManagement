@model BarChartViewModel
@inject IViewLocalizer localizer

@{
    var name = Guid.NewGuid().ToString().Replace("-", "");
    var type = (string)ViewData["Type"];
    var legend = (bool?)ViewData["Legend"] ?? true;
    var ystacked = (bool?)ViewData["YStacked"] ?? false;
    var chosenType = string.IsNullOrEmpty(type) ? "bar" : type;
    var size = (string)ViewData["Size"];
    size = string.IsNullOrEmpty(size) ? "4" : size;

    bool clearTitle = (bool?)ViewData["clearTitle"] ?? false;
    var title = (string)ViewData["title"] ?? "Total_Assets";
    var subtitle = (string)ViewData["subtitle"]?? "Total_Assets_SubTitle";

}

<div class="col-lg-@size">
    <div class="card ">
        @if (!clearTitle)
        {
            <div class="card-header ">
                <h4 class="card-title">@localizer[title]</h4>
                <p class="card-category">@localizer[subtitle]</p>
            </div>
        }
        <div class="card-body ">
            <canvas id="@name"></canvas>

        </div>
    </div>
</div>
@Html.Script(
@<script type="text/javascript">
         $(document).ready(function () {
             new Chart($("#@name"), config_@name);
         });

        var config_@name = {
             type: '@chosenType',
             data: {
                 labels:   @Html.Raw(Json.Serialize(Model.Movements.GroupBy(x => x.XAxis).Select(z => z.Max(x => x.XAxis)))),
                 datasets: [@foreach (var a in Model.Movements.GroupBy(w => w.YAxis).OrderBy(x=>x.Sum(q=>q.Amount)))
                 {
                     <text>
                     {
                         label: '@Html.Raw(a.Key.ToString())',
                         data:  @Html.Raw(Json.Serialize(a.GroupBy(x => x.XAxis).Select(z => z.Sum(x => x.Amount)))),
                         backgroundColor: @Html.Raw(Json.Serialize(a.Max(z=>z.Color))),
                         lineTension: 0.1,
                     },
                     </text>
                 }]
             }, options: {
                 legend: {
                     display: @legend.ToString().ToLower(),
                 },
                 scales: {
                     xAxes: [{
                         stacked: true
                     }],
                     yAxes: [{
                         stacked: @ystacked.ToString().ToLower()
                     }]
                 },
                 plugins: {
                     filler: {
                         propagate: true
                     }
                 }
             }
         };


</script>)

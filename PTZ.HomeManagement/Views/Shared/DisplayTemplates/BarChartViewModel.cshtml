@model BarChartViewModel
@inject IViewLocalizer localizer

@{
    var name = Guid.NewGuid().ToString().Replace("-", "");
    var type = (string)ViewData["Type"];
    var legend = (bool?)ViewData["Legend"] ?? true;
    var ystacked = (bool?)ViewData["YStacked"] ?? false;
    var chosenType = string.IsNullOrEmpty(type) ? "bar" : type;
    var size = (string)ViewData["Size"];
    size = string.IsNullOrEmpty(size) ? "col-lg-4" : size;

    bool clearTitle = (bool?)ViewData["clearTitle"] ?? false;
    var title = (string)ViewData["title"] ?? "Total_Assets";
    var subtitle = (string)ViewData["subtitle"] ?? "Total_Assets_SubTitle";

}

<div class="@size">
    <div class="card ">
        @if (!clearTitle)
        {
        <div class="card-header ">
            <h4 class="card-title">@localizer[title]</h4>
            <p class="card-category">@localizer[subtitle]</p>
        </div>
        }
        <div class="card-body ">
            <canvas id="@name"></canvas>
        </div>
    </div>
</div>

@Html.Script(
    @<script type="text/javascript">
             $(document).ready(function () {
                 new Chart($("#@name"), config_@name);
             });

            var config_@name = {
                 type: '@chosenType',
                 data: {
                     labels: @Html.Raw(Json.Serialize(Model.Items.Select(x => x.Label).Distinct())),
                     datasets: [@foreach (var a in Model.Items.GroupBy(x => x.Group))
                     {
                         <text>
                         {
                             label: '@Html.Raw(a.Key.ToString())',
                             data: @Html.Raw(Json.Serialize(Model.Items.GroupBy(x => x.Label).Select(x => x.Sum(q => q.Group == a.Key ? q.Value : 0)))),
                             backgroundColor: @Html.Raw(Json.Serialize(a.Max(z=>z.Color))),
                             lineTension: 0.1,
                         },
                         </text>
                     }]
                }, options: {
                    legend: {
                        display:false,
                    },
                    scales: {
                         xAxes: [{
                             stacked: true
                         }],
                         yAxes: [{
                             stacked: true
                         }]
                     },
                    plugins: {
                         filler: {
                             propagate: true
                         }
                     },
					tooltips: {
						mode: 'index',
						intersect: false
					},
					responsive: true
				}
             };


    </script>)

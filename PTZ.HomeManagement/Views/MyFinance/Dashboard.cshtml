@model DashboardViewModel
@inject IViewLocalizer localizer
@{
    ViewData["Title"] = localizer["Profile"];
    //ViewData.AddActivePage(ManageNavPages.Index);
}

<div class="row">
    <div class="col-lg-4 col-md-6 col-xs-6">
        <div class="card ">
            <div class="card-header ">
                <h4 class="card-title">@localizer["Total_Assets"]</h4>
                <p class="card-category">@localizer["Total_Assets_SubTitle"]</p>
            </div>
            <div class="card-body ">
                <canvas id="chart-area"></canvas>

            </div>
            <div class="card-footer ">

                <hr>
                <div class="stats">
                    @foreach (var item in Model.Assets.GroupBy(x => x.Bank))
                    {
                        <text>
                        <i class="fa fa-circle text-@item.Key"></i>@item.Key:@item.Sum(x => x.Amount) €
                        </text>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .text-BPI, .text-BPI:hover {
        color: #fd6e09 !important;
    }

    .text-CGD, .text-CGD:hover {
        color: #285a9b !important;
    }
</style>
@section Scripts {
    <script>
    window.onload = function () {
        var ctx = $("#chart-area");
        window.myPie = new Chart(ctx, config);
    };

    var datasets = [
    {
        data: @Html.Raw(Json.Serialize(Model.Assets.GroupBy(x=>x.Bank).Select(z=> z.Sum(x=>x.Amount)))),
        backgroundColor: @Html.Raw(Json.Serialize(Model.Assets.GroupBy(x => x.Bank).Select(z => z.Max(x => x.Bank == PTZ.HomeManagement.Models.MyFinanceViewModels.Enums.Bank.BPI ? "#fd6e09" : "#285a9b")))),
        labels: @Html.Raw(Json.Serialize(Model.Assets.GroupBy(x=>x.Bank).Select(z=> z.Max(x=>x.Bank.ToString())))),
    },

    {
        data: [].concat.apply([], @Html.Raw(Json.Serialize(Model.Assets.GroupBy(g => g.Bank).Select(q => q.GroupBy(x => x.AssetType).Select(s => s.Sum(x => x.Amount)))))) ,
        backgroundColor:  [].concat.apply([], @Html.Raw(Json.Serialize(Model.Assets.GroupBy(g => g.Bank).Select(q => q.GroupBy(x => x.AssetType).Select(s => s.Max(x => x.Bank == PTZ.HomeManagement.Models.MyFinanceViewModels.Enums.Bank.BPI ? "#fd6e09" : "#285a9b")))))),
        labels: [].concat.apply([], @Html.Raw(Json.Serialize(Model.Assets.GroupBy(g => g.Bank).Select(q => q.GroupBy(x => x.AssetType).Select(s => s.Max(x => x.AssetType.ToString())))))) ,
    },

    {
        data:  @Html.Raw(Json.Serialize(Model.Assets.Select(x => x.Amount))),
        backgroundColor: @Html.Raw(Json.Serialize(Model.Assets.Select(x => x.Bank == PTZ.HomeManagement.Models.MyFinanceViewModels.Enums.Bank.BPI ? "#fd6e09" : "#285a9b"))),
        labels: @Html.Raw(Json.Serialize(Model.Assets.Select(x => x.AccountTitle)))
    },

    ];
    var config = {
        type: 'doughnut',
        data: {
            datasets: datasets,
            labels: @Html.Raw(Json.Serialize(Model.Assets.Select(x => x.AccountTitle)))
        },
        options: {
            responsive: true,
            legend: {
                display: false,
            },
            tooltips: {
                callbacks: {
                    label: function (tooltipItems, data) {
                                return data.datasets[tooltipItems.datasetIndex].labels[tooltipItems.index] + ":" + data.datasets[tooltipItems.datasetIndex].data[tooltipItems.index] + "€";
                    }
                }
            }
        }
    };
    </script>
} 